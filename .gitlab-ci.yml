### default image ####
image: ubuntu
# Defining the stages of the pipeline for ldesktop
stages:
  - build
  - deploy


variables: 
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""


#  build the Docker image
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - IMAGE_TAG=$(date +%Y%m%d%H%M%S)
    - docker build -t ldesktop:latest -t ldesktop:$IMAGE_TAG .
    - docker tag ldesktop:latest gitlab.bangalore2.com:5050/tech/ldesktop:latest
    - docker tag ldesktop:$IMAGE_TAG gitlab.bangalore2.com:5050/tech/ldesktop:$IMAGE_TAG
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push gitlab.bangalore2.com:5050/tech/ldesktop:latest
    - docker push gitlab.bangalore2.com:5050/tech/ldesktop:$IMAGE_TAG
  artifacts:
    paths:
      - Dockerfile
  only:
    - main

before_script:
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)

  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  ## with your own domain name. You can copy and repeat that command if you have
  ## more than one server to connect to.
  ##
  - ssh-keyscan 101.53.133.216 >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  ##
  ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
  ## previously, uncomment the following two lines instead.
  ##
  #- echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts
  #- chmod 644 ~/.ssh/known_hosts

  ##
  ## You can optionally disable host key checking. Be aware that by adding that
  ## you are suspectible to man-in-the-middle attacks.
  ## WARNING: Use this only with the Docker executor, if you use it with shell
  ## you will overwrite your user's SSH config.
  ##
  #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  ##
  ## Optionally, if you will be using any Git commands, set the user name and
  ## email.


deploy:
  stage: deploy
  script:
  # try to connect to server
  - ssh netzary@101.53.133.216
  - cd ~/testing/ldesktop/
  - docker-compose -f pull 
  - docker-compose up -d
